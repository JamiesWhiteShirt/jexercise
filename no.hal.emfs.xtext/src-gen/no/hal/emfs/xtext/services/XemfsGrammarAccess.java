/*
* generated by Xtext
*/
package no.hal.emfs.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class XemfsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EmfsRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmfsRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmfsContainerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEmfsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEmfsNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTagsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTagsIDTerminalRuleCall_2_1_0 = (RuleCall)cTagsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContentProviderAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cContentProviderAlternatives_3_1_0 = (Alternatives)cContentProviderAssignment_3_1.eContents().get(0);
		private final RuleCall cContentProviderGitContentProviderParserRuleCall_3_1_0_0 = (RuleCall)cContentProviderAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cContentProviderEmfsResourcesRefParserRuleCall_3_1_0_1 = (RuleCall)cContentProviderAlternatives_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cSolidusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cResourcesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResourcesEmfsResourceParserRuleCall_5_0 = (RuleCall)cResourcesAssignment_5.eContents().get(0);
		
		//EmfsRoot returns EmfsContainer:
		//	{EmfsContainer} ("emfs" name=EmfsName?)? ("#" tags+=ID)* ("extends" contentProvider=(GitContentProvider |
		//	EmfsResourcesRef) ";")? "/" resources+=EmfsResource*;
		public ParserRule getRule() { return rule; }

		//{EmfsContainer} ("emfs" name=EmfsName?)? ("#" tags+=ID)* ("extends" contentProvider=(GitContentProvider |
		//EmfsResourcesRef) ";")? "/" resources+=EmfsResource*
		public Group getGroup() { return cGroup; }

		//{EmfsContainer}
		public Action getEmfsContainerAction_0() { return cEmfsContainerAction_0; }

		//("emfs" name=EmfsName?)?
		public Group getGroup_1() { return cGroup_1; }

		//"emfs"
		public Keyword getEmfsKeyword_1_0() { return cEmfsKeyword_1_0; }

		//name=EmfsName?
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//EmfsName
		public RuleCall getNameEmfsNameParserRuleCall_1_1_0() { return cNameEmfsNameParserRuleCall_1_1_0; }

		//("#" tags+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"#"
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }

		//tags+=ID
		public Assignment getTagsAssignment_2_1() { return cTagsAssignment_2_1; }

		//ID
		public RuleCall getTagsIDTerminalRuleCall_2_1_0() { return cTagsIDTerminalRuleCall_2_1_0; }

		//("extends" contentProvider=(GitContentProvider | EmfsResourcesRef) ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//contentProvider=(GitContentProvider | EmfsResourcesRef)
		public Assignment getContentProviderAssignment_3_1() { return cContentProviderAssignment_3_1; }

		//GitContentProvider | EmfsResourcesRef
		public Alternatives getContentProviderAlternatives_3_1_0() { return cContentProviderAlternatives_3_1_0; }

		//GitContentProvider
		public RuleCall getContentProviderGitContentProviderParserRuleCall_3_1_0_0() { return cContentProviderGitContentProviderParserRuleCall_3_1_0_0; }

		//EmfsResourcesRef
		public RuleCall getContentProviderEmfsResourcesRefParserRuleCall_3_1_0_1() { return cContentProviderEmfsResourcesRefParserRuleCall_3_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//"/"
		public Keyword getSolidusKeyword_4() { return cSolidusKeyword_4; }

		//resources+=EmfsResource*
		public Assignment getResourcesAssignment_5() { return cResourcesAssignment_5; }

		//EmfsResource
		public RuleCall getResourcesEmfsResourceParserRuleCall_5_0() { return cResourcesEmfsResourceParserRuleCall_5_0; }
	}

	public class EmfsNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmfsName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//EmfsName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class EmfsResourcesRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmfsResourcesRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResourcesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cResourcesEmfsResourceCrossReference_0_0 = (CrossReference)cResourcesAssignment_0.eContents().get(0);
		private final RuleCall cResourcesEmfsResourceEmfsNameParserRuleCall_0_0_1 = (RuleCall)cResourcesEmfsResourceCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cResourcesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cResourcesEmfsResourceCrossReference_1_1_0 = (CrossReference)cResourcesAssignment_1_1.eContents().get(0);
		private final RuleCall cResourcesEmfsResourceEmfsNameParserRuleCall_1_1_0_1 = (RuleCall)cResourcesEmfsResourceCrossReference_1_1_0.eContents().get(1);
		
		//EmfsResourcesRef:
		//	resources+=[EmfsResource|EmfsName] ("," resources+=[EmfsResource|EmfsName])*;
		public ParserRule getRule() { return rule; }

		//resources+=[EmfsResource|EmfsName] ("," resources+=[EmfsResource|EmfsName])*
		public Group getGroup() { return cGroup; }

		//resources+=[EmfsResource|EmfsName]
		public Assignment getResourcesAssignment_0() { return cResourcesAssignment_0; }

		//[EmfsResource|EmfsName]
		public CrossReference getResourcesEmfsResourceCrossReference_0_0() { return cResourcesEmfsResourceCrossReference_0_0; }

		//EmfsName
		public RuleCall getResourcesEmfsResourceEmfsNameParserRuleCall_0_0_1() { return cResourcesEmfsResourceEmfsNameParserRuleCall_0_0_1; }

		//("," resources+=[EmfsResource|EmfsName])*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//resources+=[EmfsResource|EmfsName]
		public Assignment getResourcesAssignment_1_1() { return cResourcesAssignment_1_1; }

		//[EmfsResource|EmfsName]
		public CrossReference getResourcesEmfsResourceCrossReference_1_1_0() { return cResourcesEmfsResourceCrossReference_1_1_0; }

		//EmfsName
		public RuleCall getResourcesEmfsResourceEmfsNameParserRuleCall_1_1_0_1() { return cResourcesEmfsResourceEmfsNameParserRuleCall_1_1_0_1; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Name:
		//	"."? ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//"."? ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//"."?
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("." ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class EmfsResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmfsResource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmfsContainerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmfsFileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EmfsResource:
		//	EmfsContainer | EmfsFile;
		public ParserRule getRule() { return rule; }

		//EmfsContainer | EmfsFile
		public Alternatives getAlternatives() { return cAlternatives; }

		//EmfsContainer
		public RuleCall getEmfsContainerParserRuleCall_0() { return cEmfsContainerParserRuleCall_0; }

		//EmfsFile
		public RuleCall getEmfsFileParserRuleCall_1() { return cEmfsFileParserRuleCall_1; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEmfsNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValueAlternatives_3_0 = (Alternatives)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cValueAlternatives_3_0.eContents().get(0);
		private final RuleCall cValueEmfsNameParserRuleCall_3_0_1 = (RuleCall)cValueAlternatives_3_0.eContents().get(1);
		
		//Property:
		//	"$" name=EmfsName "=" value=(STRING | EmfsName);
		public ParserRule getRule() { return rule; }

		//"$" name=EmfsName "=" value=(STRING | EmfsName)
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//name=EmfsName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EmfsName
		public RuleCall getNameEmfsNameParserRuleCall_1_0() { return cNameEmfsNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=(STRING | EmfsName)
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING | EmfsName
		public Alternatives getValueAlternatives_3_0() { return cValueAlternatives_3_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0_0() { return cValueSTRINGTerminalRuleCall_3_0_0; }

		//EmfsName
		public RuleCall getValueEmfsNameParserRuleCall_3_0_1() { return cValueEmfsNameParserRuleCall_3_0_1; }
	}

	public class FolderNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FolderName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FolderName:
		//	Name "/";
		public ParserRule getRule() { return rule; }

		//Name "/"
		public Group getGroup() { return cGroup; }

		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}

	public class EmfsContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmfsContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFolderNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTagsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTagsEmfsNameParserRuleCall_1_1_0 = (RuleCall)cTagsAssignment_1_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContentProviderAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cContentProviderAlternatives_3_1_0 = (Alternatives)cContentProviderAssignment_3_1.eContents().get(0);
		private final RuleCall cContentProviderGitContentProviderParserRuleCall_3_1_0_0 = (RuleCall)cContentProviderAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cContentProviderEmfsResourcesRefParserRuleCall_3_1_0_1 = (RuleCall)cContentProviderAlternatives_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cResourcesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResourcesEmfsResourceParserRuleCall_4_0 = (RuleCall)cResourcesAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EmfsContainer:
		//	name=FolderName ("#" tags+=EmfsName)* properties+=Property* ("extends" contentProvider=(GitContentProvider |
		//	EmfsResourcesRef) ";")? resources+=EmfsResource* => ";"?;
		public ParserRule getRule() { return rule; }

		//name=FolderName ("#" tags+=EmfsName)* properties+=Property* ("extends" contentProvider=(GitContentProvider |
		//EmfsResourcesRef) ";")? resources+=EmfsResource* => ";"?
		public Group getGroup() { return cGroup; }

		//name=FolderName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//FolderName
		public RuleCall getNameFolderNameParserRuleCall_0_0() { return cNameFolderNameParserRuleCall_0_0; }

		//("#" tags+=EmfsName)*
		public Group getGroup_1() { return cGroup_1; }

		//"#"
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }

		//tags+=EmfsName
		public Assignment getTagsAssignment_1_1() { return cTagsAssignment_1_1; }

		//EmfsName
		public RuleCall getTagsEmfsNameParserRuleCall_1_1_0() { return cTagsEmfsNameParserRuleCall_1_1_0; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }

		//("extends" contentProvider=(GitContentProvider | EmfsResourcesRef) ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//contentProvider=(GitContentProvider | EmfsResourcesRef)
		public Assignment getContentProviderAssignment_3_1() { return cContentProviderAssignment_3_1; }

		//GitContentProvider | EmfsResourcesRef
		public Alternatives getContentProviderAlternatives_3_1_0() { return cContentProviderAlternatives_3_1_0; }

		//GitContentProvider
		public RuleCall getContentProviderGitContentProviderParserRuleCall_3_1_0_0() { return cContentProviderGitContentProviderParserRuleCall_3_1_0_0; }

		//EmfsResourcesRef
		public RuleCall getContentProviderEmfsResourcesRefParserRuleCall_3_1_0_1() { return cContentProviderEmfsResourcesRefParserRuleCall_3_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//resources+=EmfsResource*
		public Assignment getResourcesAssignment_4() { return cResourcesAssignment_4; }

		//EmfsResource
		public RuleCall getResourcesEmfsResourceParserRuleCall_4_0() { return cResourcesEmfsResourceParserRuleCall_4_0; }

		//=> ";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class GitContentProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GitContentProvider");
		private final Assignment cGitRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGitRefGitContentRefParserRuleCall_0 = (RuleCall)cGitRefAssignment.eContents().get(0);
		
		//GitContentProvider:
		//	gitRef=GitContentRef;
		public ParserRule getRule() { return rule; }

		//gitRef=GitContentRef
		public Assignment getGitRefAssignment() { return cGitRefAssignment; }

		//GitContentRef
		public RuleCall getGitRefGitContentRefParserRuleCall_0() { return cGitRefGitContentRefParserRuleCall_0; }
	}

	public class FileNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileName");
		private final RuleCall cNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FileName:
		//	Name;
		public ParserRule getRule() { return rule; }

		//Name
		public RuleCall getNameParserRuleCall() { return cNameParserRuleCall; }
	}

	public class EmfsFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmfsFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFileNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cWriteableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cWriteableAsteriskKeyword_1_0 = (Keyword)cWriteableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTagsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTagsIDTerminalRuleCall_2_1_0 = (RuleCall)cTagsAssignment_2_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cCommercialAtKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cContentProviderAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final Alternatives cContentProviderAlternatives_4_0_1_0 = (Alternatives)cContentProviderAssignment_4_0_1.eContents().get(0);
		private final RuleCall cContentProviderURLContentProviderParserRuleCall_4_0_1_0_0 = (RuleCall)cContentProviderAlternatives_4_0_1_0.eContents().get(0);
		private final RuleCall cContentProviderGitURLContentProviderParserRuleCall_4_0_1_0_1 = (RuleCall)cContentProviderAlternatives_4_0_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Assignment cContentProviderAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Alternatives cContentProviderAlternatives_4_1_0 = (Alternatives)cContentProviderAssignment_4_1.eContents().get(0);
		private final RuleCall cContentProviderStringContentProviderParserRuleCall_4_1_0_0 = (RuleCall)cContentProviderAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cContentProviderWrappingStringContentProviderParserRuleCall_4_1_0_1 = (RuleCall)cContentProviderAlternatives_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Keyword cColonKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cContentProviderAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final Alternatives cContentProviderAlternatives_4_2_1_0 = (Alternatives)cContentProviderAssignment_4_2_1.eContents().get(0);
		private final RuleCall cContentProviderDotClasspathFileContentProviderParserRuleCall_4_2_1_0_0 = (RuleCall)cContentProviderAlternatives_4_2_1_0.eContents().get(0);
		private final RuleCall cContentProviderDotProjectFileContentProviderParserRuleCall_4_2_1_0_1 = (RuleCall)cContentProviderAlternatives_4_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cAlternatives_4.eContents().get(3);
		
		//EmfsFile:
		//	name=FileName writeable?="*"? ("#" tags+=ID)* properties+=Property* ("@" contentProvider=(URLContentProvider |
		//	GitURLContentProvider) ";" | contentProvider=(StringContentProvider | WrappingStringContentProvider) | ":"
		//	contentProvider=(DotClasspathFileContentProvider | DotProjectFileContentProvider) | ";");
		public ParserRule getRule() { return rule; }

		//name=FileName writeable?="*"? ("#" tags+=ID)* properties+=Property* ("@" contentProvider=(URLContentProvider |
		//GitURLContentProvider) ";" | contentProvider=(StringContentProvider | WrappingStringContentProvider) | ":"
		//contentProvider=(DotClasspathFileContentProvider | DotProjectFileContentProvider) | ";")
		public Group getGroup() { return cGroup; }

		//name=FileName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//FileName
		public RuleCall getNameFileNameParserRuleCall_0_0() { return cNameFileNameParserRuleCall_0_0; }

		//writeable?="*"?
		public Assignment getWriteableAssignment_1() { return cWriteableAssignment_1; }

		//"*"
		public Keyword getWriteableAsteriskKeyword_1_0() { return cWriteableAsteriskKeyword_1_0; }

		//("#" tags+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"#"
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }

		//tags+=ID
		public Assignment getTagsAssignment_2_1() { return cTagsAssignment_2_1; }

		//ID
		public RuleCall getTagsIDTerminalRuleCall_2_1_0() { return cTagsIDTerminalRuleCall_2_1_0; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }

		//"@" contentProvider=(URLContentProvider | GitURLContentProvider) ";" | contentProvider=(StringContentProvider |
		//WrappingStringContentProvider) | ":" contentProvider=(DotClasspathFileContentProvider | DotProjectFileContentProvider)
		//| ";"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"@" contentProvider=(URLContentProvider | GitURLContentProvider) ";"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"@"
		public Keyword getCommercialAtKeyword_4_0_0() { return cCommercialAtKeyword_4_0_0; }

		//contentProvider=(URLContentProvider | GitURLContentProvider)
		public Assignment getContentProviderAssignment_4_0_1() { return cContentProviderAssignment_4_0_1; }

		//URLContentProvider | GitURLContentProvider
		public Alternatives getContentProviderAlternatives_4_0_1_0() { return cContentProviderAlternatives_4_0_1_0; }

		//URLContentProvider
		public RuleCall getContentProviderURLContentProviderParserRuleCall_4_0_1_0_0() { return cContentProviderURLContentProviderParserRuleCall_4_0_1_0_0; }

		//GitURLContentProvider
		public RuleCall getContentProviderGitURLContentProviderParserRuleCall_4_0_1_0_1() { return cContentProviderGitURLContentProviderParserRuleCall_4_0_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4_0_2() { return cSemicolonKeyword_4_0_2; }

		//contentProvider=(StringContentProvider | WrappingStringContentProvider)
		public Assignment getContentProviderAssignment_4_1() { return cContentProviderAssignment_4_1; }

		//StringContentProvider | WrappingStringContentProvider
		public Alternatives getContentProviderAlternatives_4_1_0() { return cContentProviderAlternatives_4_1_0; }

		//StringContentProvider
		public RuleCall getContentProviderStringContentProviderParserRuleCall_4_1_0_0() { return cContentProviderStringContentProviderParserRuleCall_4_1_0_0; }

		//WrappingStringContentProvider
		public RuleCall getContentProviderWrappingStringContentProviderParserRuleCall_4_1_0_1() { return cContentProviderWrappingStringContentProviderParserRuleCall_4_1_0_1; }

		//":" contentProvider=(DotClasspathFileContentProvider | DotProjectFileContentProvider)
		public Group getGroup_4_2() { return cGroup_4_2; }

		//":"
		public Keyword getColonKeyword_4_2_0() { return cColonKeyword_4_2_0; }

		//contentProvider=(DotClasspathFileContentProvider | DotProjectFileContentProvider)
		public Assignment getContentProviderAssignment_4_2_1() { return cContentProviderAssignment_4_2_1; }

		//DotClasspathFileContentProvider | DotProjectFileContentProvider
		public Alternatives getContentProviderAlternatives_4_2_1_0() { return cContentProviderAlternatives_4_2_1_0; }

		//DotClasspathFileContentProvider
		public RuleCall getContentProviderDotClasspathFileContentProviderParserRuleCall_4_2_1_0_0() { return cContentProviderDotClasspathFileContentProviderParserRuleCall_4_2_1_0_0; }

		//DotProjectFileContentProvider
		public RuleCall getContentProviderDotProjectFileContentProviderParserRuleCall_4_2_1_0_1() { return cContentProviderDotProjectFileContentProviderParserRuleCall_4_2_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }
	}

	public class StringContentProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringContentProvider");
		private final Assignment cStringContentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringContentsAbstractStringContentsParserRuleCall_0 = (RuleCall)cStringContentsAssignment.eContents().get(0);
		
		//StringContentProvider:
		//	stringContents+=AbstractStringContents+;
		public ParserRule getRule() { return rule; }

		//stringContents+=AbstractStringContents+
		public Assignment getStringContentsAssignment() { return cStringContentsAssignment; }

		//AbstractStringContents
		public RuleCall getStringContentsAbstractStringContentsParserRuleCall_0() { return cStringContentsAbstractStringContentsParserRuleCall_0; }
	}

	public class AbstractStringContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractStringContents");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyValueStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVerbatimStringContentsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractStringContents:
		//	PropertyValueString | VerbatimStringContents;
		public ParserRule getRule() { return rule; }

		//PropertyValueString | VerbatimStringContents
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropertyValueString
		public RuleCall getPropertyValueStringParserRuleCall_0() { return cPropertyValueStringParserRuleCall_0; }

		//VerbatimStringContents
		public RuleCall getVerbatimStringContentsParserRuleCall_1() { return cVerbatimStringContentsParserRuleCall_1; }
	}

	public class VerbatimStringContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerbatimStringContents");
		private final Assignment cStringContentAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cStringContentAlternatives_0 = (Alternatives)cStringContentAssignment.eContents().get(0);
		private final RuleCall cStringContentSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringContentAlternatives_0.eContents().get(0);
		private final RuleCall cStringContentSTRING_CONTENTTerminalRuleCall_0_1 = (RuleCall)cStringContentAlternatives_0.eContents().get(1);
		
		//VerbatimStringContents:
		//	stringContent=(STRING | STRING_CONTENT);
		public ParserRule getRule() { return rule; }

		//stringContent=(STRING | STRING_CONTENT)
		public Assignment getStringContentAssignment() { return cStringContentAssignment; }

		//STRING | STRING_CONTENT
		public Alternatives getStringContentAlternatives_0() { return cStringContentAlternatives_0; }

		//STRING
		public RuleCall getStringContentSTRINGTerminalRuleCall_0_0() { return cStringContentSTRINGTerminalRuleCall_0_0; }

		//STRING_CONTENT
		public RuleCall getStringContentSTRING_CONTENTTerminalRuleCall_0_1() { return cStringContentSTRING_CONTENTTerminalRuleCall_0_1; }
	}

	public class PropertyValueStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValueString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPropertyNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPropertyNameIDTerminalRuleCall_1_0_0 = (RuleCall)cPropertyNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPropertyNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPropertyNameEmfsNameParserRuleCall_1_1_1_0 = (RuleCall)cPropertyNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cDefaultValueAlternatives_2_1_0 = (Alternatives)cDefaultValueAssignment_2_1.eContents().get(0);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_2_1_0_0 = (RuleCall)cDefaultValueAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cDefaultValueEmfsNameParserRuleCall_2_1_0_1 = (RuleCall)cDefaultValueAlternatives_2_1_0.eContents().get(1);
		
		//PropertyValueString:
		//	"$" (propertyName=ID | "{" propertyName=EmfsName "}") (":" defaultValue=(STRING | EmfsName))?;
		public ParserRule getRule() { return rule; }

		//"$" (propertyName=ID | "{" propertyName=EmfsName "}") (":" defaultValue=(STRING | EmfsName))?
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//propertyName=ID | "{" propertyName=EmfsName "}"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//propertyName=ID
		public Assignment getPropertyNameAssignment_1_0() { return cPropertyNameAssignment_1_0; }

		//ID
		public RuleCall getPropertyNameIDTerminalRuleCall_1_0_0() { return cPropertyNameIDTerminalRuleCall_1_0_0; }

		//"{" propertyName=EmfsName "}"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//propertyName=EmfsName
		public Assignment getPropertyNameAssignment_1_1_1() { return cPropertyNameAssignment_1_1_1; }

		//EmfsName
		public RuleCall getPropertyNameEmfsNameParserRuleCall_1_1_1_0() { return cPropertyNameEmfsNameParserRuleCall_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }

		//(":" defaultValue=(STRING | EmfsName))?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//defaultValue=(STRING | EmfsName)
		public Assignment getDefaultValueAssignment_2_1() { return cDefaultValueAssignment_2_1; }

		//STRING | EmfsName
		public Alternatives getDefaultValueAlternatives_2_1_0() { return cDefaultValueAlternatives_2_1_0; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_2_1_0_0() { return cDefaultValueSTRINGTerminalRuleCall_2_1_0_0; }

		//EmfsName
		public RuleCall getDefaultValueEmfsNameParserRuleCall_2_1_0_1() { return cDefaultValueEmfsNameParserRuleCall_2_1_0_1; }
	}

	public class WrappingStringContentProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WrappingStringContentProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixAbstractStringContentsParserRuleCall_0_0 = (RuleCall)cPrefixAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cContentProviderAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cContentProviderAlternatives_1_1_0 = (Alternatives)cContentProviderAssignment_1_1.eContents().get(0);
		private final RuleCall cContentProviderURLContentProviderParserRuleCall_1_1_0_0 = (RuleCall)cContentProviderAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cContentProviderGitURLContentProviderParserRuleCall_1_1_0_1 = (RuleCall)cContentProviderAlternatives_1_1_0.eContents().get(1);
		private final Assignment cSuffixAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSuffixAbstractStringContentsParserRuleCall_2_0 = (RuleCall)cSuffixAssignment_2.eContents().get(0);
		
		//WrappingStringContentProvider:
		//	prefix=AbstractStringContents ("@" contentProvider=(URLContentProvider | GitURLContentProvider))
		//	suffix=AbstractStringContents;
		public ParserRule getRule() { return rule; }

		//prefix=AbstractStringContents ("@" contentProvider=(URLContentProvider | GitURLContentProvider))
		//suffix=AbstractStringContents
		public Group getGroup() { return cGroup; }

		//prefix=AbstractStringContents
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }

		//AbstractStringContents
		public RuleCall getPrefixAbstractStringContentsParserRuleCall_0_0() { return cPrefixAbstractStringContentsParserRuleCall_0_0; }

		//"@" contentProvider=(URLContentProvider | GitURLContentProvider)
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//contentProvider=(URLContentProvider | GitURLContentProvider)
		public Assignment getContentProviderAssignment_1_1() { return cContentProviderAssignment_1_1; }

		//URLContentProvider | GitURLContentProvider
		public Alternatives getContentProviderAlternatives_1_1_0() { return cContentProviderAlternatives_1_1_0; }

		//URLContentProvider
		public RuleCall getContentProviderURLContentProviderParserRuleCall_1_1_0_0() { return cContentProviderURLContentProviderParserRuleCall_1_1_0_0; }

		//GitURLContentProvider
		public RuleCall getContentProviderGitURLContentProviderParserRuleCall_1_1_0_1() { return cContentProviderGitURLContentProviderParserRuleCall_1_1_0_1; }

		//suffix=AbstractStringContents
		public Assignment getSuffixAssignment_2() { return cSuffixAssignment_2; }

		//AbstractStringContents
		public RuleCall getSuffixAbstractStringContentsParserRuleCall_2_0() { return cSuffixAbstractStringContentsParserRuleCall_2_0; }
	}

	public class URL_SCHEMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URL_SCHEME");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHttpKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHttpsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFtpKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFileKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//URL_SCHEME:
		//	"http" | "https" | "ftp" | "file";
		public ParserRule getRule() { return rule; }

		//"http" | "https" | "ftp" | "file"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"http"
		public Keyword getHttpKeyword_0() { return cHttpKeyword_0; }

		//"https"
		public Keyword getHttpsKeyword_1() { return cHttpsKeyword_1; }

		//"ftp"
		public Keyword getFtpKeyword_2() { return cFtpKeyword_2; }

		//"file"
		public Keyword getFileKeyword_3() { return cFileKeyword_3; }
	}

	public class URL_HOSTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URL_HOST");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cDigitZeroKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cDigitOneKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Keyword cDigitTwoKeyword_3_1_2 = (Keyword)cAlternatives_3_1.eContents().get(2);
		private final Keyword cDigitThreeKeyword_3_1_3 = (Keyword)cAlternatives_3_1.eContents().get(3);
		private final Keyword cDigitFourKeyword_3_1_4 = (Keyword)cAlternatives_3_1.eContents().get(4);
		private final Keyword cDigitFiveKeyword_3_1_5 = (Keyword)cAlternatives_3_1.eContents().get(5);
		private final Keyword cDigitSixKeyword_3_1_6 = (Keyword)cAlternatives_3_1.eContents().get(6);
		private final Keyword cDigitSevenKeyword_3_1_7 = (Keyword)cAlternatives_3_1.eContents().get(7);
		private final Keyword cDigitEightKeyword_3_1_8 = (Keyword)cAlternatives_3_1.eContents().get(8);
		private final Keyword cDigitNineKeyword_3_1_9 = (Keyword)cAlternatives_3_1.eContents().get(9);
		
		//URL_HOST:
		//	"//" ID ("." ID)* (":" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)?;
		public ParserRule getRule() { return rule; }

		//"//" ID ("." ID)* (":" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)?
		public Group getGroup() { return cGroup; }

		//"//"
		public Keyword getSolidusSolidusKeyword_0() { return cSolidusSolidusKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("." ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }

		//(":" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"0"
		public Keyword getDigitZeroKeyword_3_1_0() { return cDigitZeroKeyword_3_1_0; }

		//"1"
		public Keyword getDigitOneKeyword_3_1_1() { return cDigitOneKeyword_3_1_1; }

		//"2"
		public Keyword getDigitTwoKeyword_3_1_2() { return cDigitTwoKeyword_3_1_2; }

		//"3"
		public Keyword getDigitThreeKeyword_3_1_3() { return cDigitThreeKeyword_3_1_3; }

		//"4"
		public Keyword getDigitFourKeyword_3_1_4() { return cDigitFourKeyword_3_1_4; }

		//"5"
		public Keyword getDigitFiveKeyword_3_1_5() { return cDigitFiveKeyword_3_1_5; }

		//"6"
		public Keyword getDigitSixKeyword_3_1_6() { return cDigitSixKeyword_3_1_6; }

		//"7"
		public Keyword getDigitSevenKeyword_3_1_7() { return cDigitSevenKeyword_3_1_7; }

		//"8"
		public Keyword getDigitEightKeyword_3_1_8() { return cDigitEightKeyword_3_1_8; }

		//"9"
		public Keyword getDigitNineKeyword_3_1_9() { return cDigitNineKeyword_3_1_9; }
	}

	public class URL_PATHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URL_PATH");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFolderNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cFileNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//URL_PATH:
		//	"/" FolderName* FileName;
		public ParserRule getRule() { return rule; }

		//"/" FolderName* FileName
		public Group getGroup() { return cGroup; }

		//"/"
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }

		//FolderName*
		public RuleCall getFolderNameParserRuleCall_1() { return cFolderNameParserRuleCall_1; }

		//FileName
		public RuleCall getFileNameParserRuleCall_2() { return cFileNameParserRuleCall_2; }
	}

	public class URLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cURL_SCHEMEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cURL_HOSTParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cURL_PATHParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//URL:
		//	URL_SCHEME ":" URL_HOST? URL_PATH;
		public ParserRule getRule() { return rule; }

		//URL_SCHEME ":" URL_HOST? URL_PATH
		public Group getGroup() { return cGroup; }

		//URL_SCHEME
		public RuleCall getURL_SCHEMEParserRuleCall_0() { return cURL_SCHEMEParserRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//URL_HOST?
		public RuleCall getURL_HOSTParserRuleCall_2() { return cURL_HOSTParserRuleCall_2; }

		//URL_PATH
		public RuleCall getURL_PATHParserRuleCall_3() { return cURL_PATHParserRuleCall_3; }
	}

	public class URLContentProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URLContentProvider");
		private final Assignment cUrlStringAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cUrlStringAlternatives_0 = (Alternatives)cUrlStringAssignment.eContents().get(0);
		private final RuleCall cUrlStringSTRINGTerminalRuleCall_0_0 = (RuleCall)cUrlStringAlternatives_0.eContents().get(0);
		private final RuleCall cUrlStringURLParserRuleCall_0_1 = (RuleCall)cUrlStringAlternatives_0.eContents().get(1);
		
		//URLContentProvider:
		//	urlString=(STRING | URL);
		public ParserRule getRule() { return rule; }

		//urlString=(STRING | URL)
		public Assignment getUrlStringAssignment() { return cUrlStringAssignment; }

		//STRING | URL
		public Alternatives getUrlStringAlternatives_0() { return cUrlStringAlternatives_0; }

		//STRING
		public RuleCall getUrlStringSTRINGTerminalRuleCall_0_0() { return cUrlStringSTRINGTerminalRuleCall_0_0; }

		//URL
		public RuleCall getUrlStringURLParserRuleCall_0_1() { return cUrlStringURLParserRuleCall_0_1; }
	}

	public class GitURLContentProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GitURLContentProvider");
		private final Assignment cGitRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGitRefGitContentRefParserRuleCall_0 = (RuleCall)cGitRefAssignment.eContents().get(0);
		
		//GitURLContentProvider:
		//	gitRef=GitContentRef;
		public ParserRule getRule() { return rule; }

		//gitRef=GitContentRef
		public Assignment getGitRefAssignment() { return cGitRefAssignment; }

		//GitContentRef
		public RuleCall getGitRefGitContentRefParserRuleCall_0() { return cGitRefGitContentRefParserRuleCall_0; }
	}

	public class GIT_HOSTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GIT_HOST");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// git@github.com:me/mytestrepo.git
		//GIT_HOST:
		//	ID ("." ID)+;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)+
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)+
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class GitContentRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GitContentRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cHostAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cHostGIT_HOSTParserRuleCall_2_0_0_0 = (RuleCall)cHostAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cColonKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cOwnerAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cOwnerIDTerminalRuleCall_2_0_1_1_0 = (RuleCall)cOwnerAssignment_2_0_1_1.eContents().get(0);
		private final Assignment cOwnerAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnerIDTerminalRuleCall_2_1_0 = (RuleCall)cOwnerAssignment_2_1.eContents().get(0);
		private final Keyword cSolidusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRepoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRepoIDTerminalRuleCall_4_0 = (RuleCall)cRepoAssignment_4.eContents().get(0);
		private final Assignment cPathAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPathURL_PATHParserRuleCall_5_0 = (RuleCall)cPathAssignment_5.eContents().get(0);
		
		//GitContentRef:
		//	"git" "@" (host=GIT_HOST (":" owner=ID)? | owner=ID) "/" repo=ID path=URL_PATH?;
		public ParserRule getRule() { return rule; }

		//"git" "@" (host=GIT_HOST (":" owner=ID)? | owner=ID) "/" repo=ID path=URL_PATH?
		public Group getGroup() { return cGroup; }

		//"git"
		public Keyword getGitKeyword_0() { return cGitKeyword_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//host=GIT_HOST (":" owner=ID)? | owner=ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//host=GIT_HOST (":" owner=ID)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//host=GIT_HOST
		public Assignment getHostAssignment_2_0_0() { return cHostAssignment_2_0_0; }

		//GIT_HOST
		public RuleCall getHostGIT_HOSTParserRuleCall_2_0_0_0() { return cHostGIT_HOSTParserRuleCall_2_0_0_0; }

		//(":" owner=ID)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//":"
		public Keyword getColonKeyword_2_0_1_0() { return cColonKeyword_2_0_1_0; }

		//owner=ID
		public Assignment getOwnerAssignment_2_0_1_1() { return cOwnerAssignment_2_0_1_1; }

		//ID
		public RuleCall getOwnerIDTerminalRuleCall_2_0_1_1_0() { return cOwnerIDTerminalRuleCall_2_0_1_1_0; }

		//owner=ID
		public Assignment getOwnerAssignment_2_1() { return cOwnerAssignment_2_1; }

		//ID
		public RuleCall getOwnerIDTerminalRuleCall_2_1_0() { return cOwnerIDTerminalRuleCall_2_1_0; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }

		//repo=ID
		public Assignment getRepoAssignment_4() { return cRepoAssignment_4; }

		//ID
		public RuleCall getRepoIDTerminalRuleCall_4_0() { return cRepoIDTerminalRuleCall_4_0; }

		//path=URL_PATH?
		public Assignment getPathAssignment_5() { return cPathAssignment_5; }

		//URL_PATH
		public RuleCall getPathURL_PATHParserRuleCall_5_0() { return cPathURL_PATHParserRuleCall_5_0; }
	}

	public class DotClasspathFileContentProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DotClasspathFileContentProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDotClasspathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntriesAbstractClasspathEntryParserRuleCall_1_0 = (RuleCall)cEntriesAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DotClasspathFileContentProvider:
		//	"dot.classpath" entries+=AbstractClasspathEntry+ ";";
		public ParserRule getRule() { return rule; }

		//"dot.classpath" entries+=AbstractClasspathEntry+ ";"
		public Group getGroup() { return cGroup; }

		//"dot.classpath"
		public Keyword getDotClasspathKeyword_0() { return cDotClasspathKeyword_0; }

		//entries+=AbstractClasspathEntry+
		public Assignment getEntriesAssignment_1() { return cEntriesAssignment_1; }

		//AbstractClasspathEntry
		public RuleCall getEntriesAbstractClasspathEntryParserRuleCall_1_0() { return cEntriesAbstractClasspathEntryParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AbstractClasspathEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractClasspathEntry");
		private final RuleCall cClasspathEntryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractClasspathEntry:
		//	ClasspathEntry;
		public ParserRule getRule() { return rule; }

		//ClasspathEntry
		public RuleCall getClasspathEntryParserRuleCall() { return cClasspathEntryParserRuleCall; }
	}

	public class CLASSPATH_ENTRY_PATHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CLASSPATH_ENTRY_PATH");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFolderNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFileNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CLASSPATH_ENTRY_PATH:
		//	FolderName* FileName;
		public ParserRule getRule() { return rule; }

		//FolderName* FileName
		public Group getGroup() { return cGroup; }

		//FolderName*
		public RuleCall getFolderNameParserRuleCall_0() { return cFolderNameParserRuleCall_0; }

		//FileName
		public RuleCall getFileNameParserRuleCall_1() { return cFileNameParserRuleCall_1; }
	}

	public class ClasspathEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClasspathEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExplicitKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExplicitKindClasspathEntryKindEnumRuleCall_0_0 = (RuleCall)cExplicitKindAssignment_0.eContents().get(0);
		private final Assignment cExplicitPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExplicitPathCLASSPATH_ENTRY_PATHParserRuleCall_1_0 = (RuleCall)cExplicitPathAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMajorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMajorVERSIONParserRuleCall_2_1_0 = (RuleCall)cMajorAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cFullStopKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cMinorAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cMinorVERSIONParserRuleCall_2_2_1_0 = (RuleCall)cMinorAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ClasspathEntry:
		//	explicitKind=ClasspathEntryKind explicitPath=CLASSPATH_ENTRY_PATH ("(" major=VERSION ("." minor=VERSION)? ")")?;
		public ParserRule getRule() { return rule; }

		//explicitKind=ClasspathEntryKind explicitPath=CLASSPATH_ENTRY_PATH ("(" major=VERSION ("." minor=VERSION)? ")")?
		public Group getGroup() { return cGroup; }

		//explicitKind=ClasspathEntryKind
		public Assignment getExplicitKindAssignment_0() { return cExplicitKindAssignment_0; }

		//ClasspathEntryKind
		public RuleCall getExplicitKindClasspathEntryKindEnumRuleCall_0_0() { return cExplicitKindClasspathEntryKindEnumRuleCall_0_0; }

		//explicitPath=CLASSPATH_ENTRY_PATH
		public Assignment getExplicitPathAssignment_1() { return cExplicitPathAssignment_1; }

		//CLASSPATH_ENTRY_PATH
		public RuleCall getExplicitPathCLASSPATH_ENTRY_PATHParserRuleCall_1_0() { return cExplicitPathCLASSPATH_ENTRY_PATHParserRuleCall_1_0; }

		//("(" major=VERSION ("." minor=VERSION)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//major=VERSION
		public Assignment getMajorAssignment_2_1() { return cMajorAssignment_2_1; }

		//VERSION
		public RuleCall getMajorVERSIONParserRuleCall_2_1_0() { return cMajorVERSIONParserRuleCall_2_1_0; }

		//("." minor=VERSION)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"."
		public Keyword getFullStopKeyword_2_2_0() { return cFullStopKeyword_2_2_0; }

		//minor=VERSION
		public Assignment getMinorAssignment_2_2_1() { return cMinorAssignment_2_2_1; }

		//VERSION
		public RuleCall getMinorVERSIONParserRuleCall_2_2_1_0() { return cMinorVERSIONParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class VERSIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VERSION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDigitOneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDigitTwoKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDigitThreeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDigitFourKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDigitFiveKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDigitSixKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDigitSevenKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDigitEightKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDigitNineKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//VERSION returns ecore::EInt:
		//	("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+;
		public ParserRule getRule() { return rule; }

		//("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
		public Alternatives getAlternatives() { return cAlternatives; }

		//"0"
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }

		//"1"
		public Keyword getDigitOneKeyword_1() { return cDigitOneKeyword_1; }

		//"2"
		public Keyword getDigitTwoKeyword_2() { return cDigitTwoKeyword_2; }

		//"3"
		public Keyword getDigitThreeKeyword_3() { return cDigitThreeKeyword_3; }

		//"4"
		public Keyword getDigitFourKeyword_4() { return cDigitFourKeyword_4; }

		//"5"
		public Keyword getDigitFiveKeyword_5() { return cDigitFiveKeyword_5; }

		//"6"
		public Keyword getDigitSixKeyword_6() { return cDigitSixKeyword_6; }

		//"7"
		public Keyword getDigitSevenKeyword_7() { return cDigitSevenKeyword_7; }

		//"8"
		public Keyword getDigitEightKeyword_8() { return cDigitEightKeyword_8; }

		//"9"
		public Keyword getDigitNineKeyword_9() { return cDigitNineKeyword_9; }
	}

	public class DotProjectFileContentProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DotProjectFileContentProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDotProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeysAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cKeysAlternatives_1_1_0 = (Alternatives)cKeysAssignment_1_1.eContents().get(0);
		private final RuleCall cKeysSTRINGTerminalRuleCall_1_1_0_0 = (RuleCall)cKeysAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cKeysFileNameParserRuleCall_1_1_0_1 = (RuleCall)cKeysAlternatives_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLinkedResourcesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cLinkedResourcesEmfsResourceCrossReference_2_1_0 = (CrossReference)cLinkedResourcesAssignment_2_1.eContents().get(0);
		private final RuleCall cLinkedResourcesEmfsResourceEmfsNameParserRuleCall_2_1_0_1 = (RuleCall)cLinkedResourcesEmfsResourceCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cLinkedResourcesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cLinkedResourcesEmfsResourceCrossReference_2_2_1_0 = (CrossReference)cLinkedResourcesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cLinkedResourcesEmfsResourceEmfsNameParserRuleCall_2_2_1_0_1 = (RuleCall)cLinkedResourcesEmfsResourceCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DotProjectFileContentProvider:
		//	"dot.project" ("#" keys+=(STRING | FileName))+ ("@" linkedResources+=[EmfsResource|EmfsName] (","
		//	linkedResources+=[EmfsResource|EmfsName])*)* ";";
		public ParserRule getRule() { return rule; }

		//"dot.project" ("#" keys+=(STRING | FileName))+ ("@" linkedResources+=[EmfsResource|EmfsName] (","
		//linkedResources+=[EmfsResource|EmfsName])*)* ";"
		public Group getGroup() { return cGroup; }

		//"dot.project"
		public Keyword getDotProjectKeyword_0() { return cDotProjectKeyword_0; }

		//("#" keys+=(STRING | FileName))+
		public Group getGroup_1() { return cGroup_1; }

		//"#"
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }

		//keys+=(STRING | FileName)
		public Assignment getKeysAssignment_1_1() { return cKeysAssignment_1_1; }

		//STRING | FileName
		public Alternatives getKeysAlternatives_1_1_0() { return cKeysAlternatives_1_1_0; }

		//STRING
		public RuleCall getKeysSTRINGTerminalRuleCall_1_1_0_0() { return cKeysSTRINGTerminalRuleCall_1_1_0_0; }

		//FileName
		public RuleCall getKeysFileNameParserRuleCall_1_1_0_1() { return cKeysFileNameParserRuleCall_1_1_0_1; }

		//("@" linkedResources+=[EmfsResource|EmfsName] ("," linkedResources+=[EmfsResource|EmfsName])*)*
		public Group getGroup_2() { return cGroup_2; }

		//"@"
		public Keyword getCommercialAtKeyword_2_0() { return cCommercialAtKeyword_2_0; }

		//linkedResources+=[EmfsResource|EmfsName]
		public Assignment getLinkedResourcesAssignment_2_1() { return cLinkedResourcesAssignment_2_1; }

		//[EmfsResource|EmfsName]
		public CrossReference getLinkedResourcesEmfsResourceCrossReference_2_1_0() { return cLinkedResourcesEmfsResourceCrossReference_2_1_0; }

		//EmfsName
		public RuleCall getLinkedResourcesEmfsResourceEmfsNameParserRuleCall_2_1_0_1() { return cLinkedResourcesEmfsResourceEmfsNameParserRuleCall_2_1_0_1; }

		//("," linkedResources+=[EmfsResource|EmfsName])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//linkedResources+=[EmfsResource|EmfsName]
		public Assignment getLinkedResourcesAssignment_2_2_1() { return cLinkedResourcesAssignment_2_2_1; }

		//[EmfsResource|EmfsName]
		public CrossReference getLinkedResourcesEmfsResourceCrossReference_2_2_1_0() { return cLinkedResourcesEmfsResourceCrossReference_2_2_1_0; }

		//EmfsName
		public RuleCall getLinkedResourcesEmfsResourceEmfsNameParserRuleCall_2_2_1_0_1() { return cLinkedResourcesEmfsResourceEmfsNameParserRuleCall_2_2_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	
	public class ClasspathEntryKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ClasspathEntryKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSrcEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSrcSourceFolderKeyword_0_0 = (Keyword)cSrcEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutputEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutputOutputFolderKeyword_1_0 = (Keyword)cOutputEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLibEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLibLibraryJarKeyword_2_0 = (Keyword)cLibEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cConEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cConClassContainerKeyword_3_0 = (Keyword)cConEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ClasspathEntryKind:
		//	src="source-folder" | output="output-folder" | lib="library-jar" | con="class-container";
		public EnumRule getRule() { return rule; }

		//src="source-folder" | output="output-folder" | lib="library-jar" | con="class-container"
		public Alternatives getAlternatives() { return cAlternatives; }

		//src="source-folder"
		public EnumLiteralDeclaration getSrcEnumLiteralDeclaration_0() { return cSrcEnumLiteralDeclaration_0; }

		//"source-folder"
		public Keyword getSrcSourceFolderKeyword_0_0() { return cSrcSourceFolderKeyword_0_0; }

		//output="output-folder"
		public EnumLiteralDeclaration getOutputEnumLiteralDeclaration_1() { return cOutputEnumLiteralDeclaration_1; }

		//"output-folder"
		public Keyword getOutputOutputFolderKeyword_1_0() { return cOutputOutputFolderKeyword_1_0; }

		//lib="library-jar"
		public EnumLiteralDeclaration getLibEnumLiteralDeclaration_2() { return cLibEnumLiteralDeclaration_2; }

		//"library-jar"
		public Keyword getLibLibraryJarKeyword_2_0() { return cLibLibraryJarKeyword_2_0; }

		//con="class-container"
		public EnumLiteralDeclaration getConEnumLiteralDeclaration_3() { return cConEnumLiteralDeclaration_3; }

		//"class-container"
		public Keyword getConClassContainerKeyword_3_0() { return cConClassContainerKeyword_3_0; }
	}
	
	private final EmfsRootElements pEmfsRoot;
	private final EmfsNameElements pEmfsName;
	private final EmfsResourcesRefElements pEmfsResourcesRef;
	private final NameElements pName;
	private final EmfsResourceElements pEmfsResource;
	private final PropertyElements pProperty;
	private final FolderNameElements pFolderName;
	private final EmfsContainerElements pEmfsContainer;
	private final GitContentProviderElements pGitContentProvider;
	private final FileNameElements pFileName;
	private final EmfsFileElements pEmfsFile;
	private final StringContentProviderElements pStringContentProvider;
	private final AbstractStringContentsElements pAbstractStringContents;
	private final TerminalRule tSTRING_CONTENT;
	private final VerbatimStringContentsElements pVerbatimStringContents;
	private final PropertyValueStringElements pPropertyValueString;
	private final WrappingStringContentProviderElements pWrappingStringContentProvider;
	private final URL_SCHEMEElements pURL_SCHEME;
	private final URL_HOSTElements pURL_HOST;
	private final URL_PATHElements pURL_PATH;
	private final URLElements pURL;
	private final URLContentProviderElements pURLContentProvider;
	private final GitURLContentProviderElements pGitURLContentProvider;
	private final GIT_HOSTElements pGIT_HOST;
	private final GitContentRefElements pGitContentRef;
	private final DotClasspathFileContentProviderElements pDotClasspathFileContentProvider;
	private final AbstractClasspathEntryElements pAbstractClasspathEntry;
	private final CLASSPATH_ENTRY_PATHElements pCLASSPATH_ENTRY_PATH;
	private final ClasspathEntryElements pClasspathEntry;
	private final ClasspathEntryKindElements unknownRuleClasspathEntryKind;
	private final VERSIONElements pVERSION;
	private final DotProjectFileContentProviderElements pDotProjectFileContentProvider;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public XemfsGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pEmfsRoot = new EmfsRootElements();
		this.pEmfsName = new EmfsNameElements();
		this.pEmfsResourcesRef = new EmfsResourcesRefElements();
		this.pName = new NameElements();
		this.pEmfsResource = new EmfsResourceElements();
		this.pProperty = new PropertyElements();
		this.pFolderName = new FolderNameElements();
		this.pEmfsContainer = new EmfsContainerElements();
		this.pGitContentProvider = new GitContentProviderElements();
		this.pFileName = new FileNameElements();
		this.pEmfsFile = new EmfsFileElements();
		this.pStringContentProvider = new StringContentProviderElements();
		this.pAbstractStringContents = new AbstractStringContentsElements();
		this.tSTRING_CONTENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_CONTENT");
		this.pVerbatimStringContents = new VerbatimStringContentsElements();
		this.pPropertyValueString = new PropertyValueStringElements();
		this.pWrappingStringContentProvider = new WrappingStringContentProviderElements();
		this.pURL_SCHEME = new URL_SCHEMEElements();
		this.pURL_HOST = new URL_HOSTElements();
		this.pURL_PATH = new URL_PATHElements();
		this.pURL = new URLElements();
		this.pURLContentProvider = new URLContentProviderElements();
		this.pGitURLContentProvider = new GitURLContentProviderElements();
		this.pGIT_HOST = new GIT_HOSTElements();
		this.pGitContentRef = new GitContentRefElements();
		this.pDotClasspathFileContentProvider = new DotClasspathFileContentProviderElements();
		this.pAbstractClasspathEntry = new AbstractClasspathEntryElements();
		this.pCLASSPATH_ENTRY_PATH = new CLASSPATH_ENTRY_PATHElements();
		this.pClasspathEntry = new ClasspathEntryElements();
		this.unknownRuleClasspathEntryKind = new ClasspathEntryKindElements();
		this.pVERSION = new VERSIONElements();
		this.pDotProjectFileContentProvider = new DotProjectFileContentProviderElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("no.hal.emfs.xtext.Xemfs".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//EmfsRoot returns EmfsContainer:
	//	{EmfsContainer} ("emfs" name=EmfsName?)? ("#" tags+=ID)* ("extends" contentProvider=(GitContentProvider |
	//	EmfsResourcesRef) ";")? "/" resources+=EmfsResource*;
	public EmfsRootElements getEmfsRootAccess() {
		return pEmfsRoot;
	}
	
	public ParserRule getEmfsRootRule() {
		return getEmfsRootAccess().getRule();
	}

	//EmfsName:
	//	ID ("." ID)*;
	public EmfsNameElements getEmfsNameAccess() {
		return pEmfsName;
	}
	
	public ParserRule getEmfsNameRule() {
		return getEmfsNameAccess().getRule();
	}

	//EmfsResourcesRef:
	//	resources+=[EmfsResource|EmfsName] ("," resources+=[EmfsResource|EmfsName])*;
	public EmfsResourcesRefElements getEmfsResourcesRefAccess() {
		return pEmfsResourcesRef;
	}
	
	public ParserRule getEmfsResourcesRefRule() {
		return getEmfsResourcesRefAccess().getRule();
	}

	//Name:
	//	"."? ID ("." ID)*;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//EmfsResource:
	//	EmfsContainer | EmfsFile;
	public EmfsResourceElements getEmfsResourceAccess() {
		return pEmfsResource;
	}
	
	public ParserRule getEmfsResourceRule() {
		return getEmfsResourceAccess().getRule();
	}

	//Property:
	//	"$" name=EmfsName "=" value=(STRING | EmfsName);
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//FolderName:
	//	Name "/";
	public FolderNameElements getFolderNameAccess() {
		return pFolderName;
	}
	
	public ParserRule getFolderNameRule() {
		return getFolderNameAccess().getRule();
	}

	//EmfsContainer:
	//	name=FolderName ("#" tags+=EmfsName)* properties+=Property* ("extends" contentProvider=(GitContentProvider |
	//	EmfsResourcesRef) ";")? resources+=EmfsResource* => ";"?;
	public EmfsContainerElements getEmfsContainerAccess() {
		return pEmfsContainer;
	}
	
	public ParserRule getEmfsContainerRule() {
		return getEmfsContainerAccess().getRule();
	}

	//GitContentProvider:
	//	gitRef=GitContentRef;
	public GitContentProviderElements getGitContentProviderAccess() {
		return pGitContentProvider;
	}
	
	public ParserRule getGitContentProviderRule() {
		return getGitContentProviderAccess().getRule();
	}

	//FileName:
	//	Name;
	public FileNameElements getFileNameAccess() {
		return pFileName;
	}
	
	public ParserRule getFileNameRule() {
		return getFileNameAccess().getRule();
	}

	//EmfsFile:
	//	name=FileName writeable?="*"? ("#" tags+=ID)* properties+=Property* ("@" contentProvider=(URLContentProvider |
	//	GitURLContentProvider) ";" | contentProvider=(StringContentProvider | WrappingStringContentProvider) | ":"
	//	contentProvider=(DotClasspathFileContentProvider | DotProjectFileContentProvider) | ";");
	public EmfsFileElements getEmfsFileAccess() {
		return pEmfsFile;
	}
	
	public ParserRule getEmfsFileRule() {
		return getEmfsFileAccess().getRule();
	}

	//StringContentProvider:
	//	stringContents+=AbstractStringContents+;
	public StringContentProviderElements getStringContentProviderAccess() {
		return pStringContentProvider;
	}
	
	public ParserRule getStringContentProviderRule() {
		return getStringContentProviderAccess().getRule();
	}

	//AbstractStringContents:
	//	PropertyValueString | VerbatimStringContents;
	public AbstractStringContentsElements getAbstractStringContentsAccess() {
		return pAbstractStringContents;
	}
	
	public ParserRule getAbstractStringContentsRule() {
		return getAbstractStringContentsAccess().getRule();
	}

	//terminal STRING_CONTENT:
	//	"---8<---\n"->"\n--->8---";
	public TerminalRule getSTRING_CONTENTRule() {
		return tSTRING_CONTENT;
	} 

	//VerbatimStringContents:
	//	stringContent=(STRING | STRING_CONTENT);
	public VerbatimStringContentsElements getVerbatimStringContentsAccess() {
		return pVerbatimStringContents;
	}
	
	public ParserRule getVerbatimStringContentsRule() {
		return getVerbatimStringContentsAccess().getRule();
	}

	//PropertyValueString:
	//	"$" (propertyName=ID | "{" propertyName=EmfsName "}") (":" defaultValue=(STRING | EmfsName))?;
	public PropertyValueStringElements getPropertyValueStringAccess() {
		return pPropertyValueString;
	}
	
	public ParserRule getPropertyValueStringRule() {
		return getPropertyValueStringAccess().getRule();
	}

	//WrappingStringContentProvider:
	//	prefix=AbstractStringContents ("@" contentProvider=(URLContentProvider | GitURLContentProvider))
	//	suffix=AbstractStringContents;
	public WrappingStringContentProviderElements getWrappingStringContentProviderAccess() {
		return pWrappingStringContentProvider;
	}
	
	public ParserRule getWrappingStringContentProviderRule() {
		return getWrappingStringContentProviderAccess().getRule();
	}

	//URL_SCHEME:
	//	"http" | "https" | "ftp" | "file";
	public URL_SCHEMEElements getURL_SCHEMEAccess() {
		return pURL_SCHEME;
	}
	
	public ParserRule getURL_SCHEMERule() {
		return getURL_SCHEMEAccess().getRule();
	}

	//URL_HOST:
	//	"//" ID ("." ID)* (":" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)?;
	public URL_HOSTElements getURL_HOSTAccess() {
		return pURL_HOST;
	}
	
	public ParserRule getURL_HOSTRule() {
		return getURL_HOSTAccess().getRule();
	}

	//URL_PATH:
	//	"/" FolderName* FileName;
	public URL_PATHElements getURL_PATHAccess() {
		return pURL_PATH;
	}
	
	public ParserRule getURL_PATHRule() {
		return getURL_PATHAccess().getRule();
	}

	//URL:
	//	URL_SCHEME ":" URL_HOST? URL_PATH;
	public URLElements getURLAccess() {
		return pURL;
	}
	
	public ParserRule getURLRule() {
		return getURLAccess().getRule();
	}

	//URLContentProvider:
	//	urlString=(STRING | URL);
	public URLContentProviderElements getURLContentProviderAccess() {
		return pURLContentProvider;
	}
	
	public ParserRule getURLContentProviderRule() {
		return getURLContentProviderAccess().getRule();
	}

	//GitURLContentProvider:
	//	gitRef=GitContentRef;
	public GitURLContentProviderElements getGitURLContentProviderAccess() {
		return pGitURLContentProvider;
	}
	
	public ParserRule getGitURLContentProviderRule() {
		return getGitURLContentProviderAccess().getRule();
	}

	//// git@github.com:me/mytestrepo.git
	//GIT_HOST:
	//	ID ("." ID)+;
	public GIT_HOSTElements getGIT_HOSTAccess() {
		return pGIT_HOST;
	}
	
	public ParserRule getGIT_HOSTRule() {
		return getGIT_HOSTAccess().getRule();
	}

	//GitContentRef:
	//	"git" "@" (host=GIT_HOST (":" owner=ID)? | owner=ID) "/" repo=ID path=URL_PATH?;
	public GitContentRefElements getGitContentRefAccess() {
		return pGitContentRef;
	}
	
	public ParserRule getGitContentRefRule() {
		return getGitContentRefAccess().getRule();
	}

	//DotClasspathFileContentProvider:
	//	"dot.classpath" entries+=AbstractClasspathEntry+ ";";
	public DotClasspathFileContentProviderElements getDotClasspathFileContentProviderAccess() {
		return pDotClasspathFileContentProvider;
	}
	
	public ParserRule getDotClasspathFileContentProviderRule() {
		return getDotClasspathFileContentProviderAccess().getRule();
	}

	//AbstractClasspathEntry:
	//	ClasspathEntry;
	public AbstractClasspathEntryElements getAbstractClasspathEntryAccess() {
		return pAbstractClasspathEntry;
	}
	
	public ParserRule getAbstractClasspathEntryRule() {
		return getAbstractClasspathEntryAccess().getRule();
	}

	//CLASSPATH_ENTRY_PATH:
	//	FolderName* FileName;
	public CLASSPATH_ENTRY_PATHElements getCLASSPATH_ENTRY_PATHAccess() {
		return pCLASSPATH_ENTRY_PATH;
	}
	
	public ParserRule getCLASSPATH_ENTRY_PATHRule() {
		return getCLASSPATH_ENTRY_PATHAccess().getRule();
	}

	//ClasspathEntry:
	//	explicitKind=ClasspathEntryKind explicitPath=CLASSPATH_ENTRY_PATH ("(" major=VERSION ("." minor=VERSION)? ")")?;
	public ClasspathEntryElements getClasspathEntryAccess() {
		return pClasspathEntry;
	}
	
	public ParserRule getClasspathEntryRule() {
		return getClasspathEntryAccess().getRule();
	}

	//enum ClasspathEntryKind:
	//	src="source-folder" | output="output-folder" | lib="library-jar" | con="class-container";
	public ClasspathEntryKindElements getClasspathEntryKindAccess() {
		return unknownRuleClasspathEntryKind;
	}
	
	public EnumRule getClasspathEntryKindRule() {
		return getClasspathEntryKindAccess().getRule();
	}

	//VERSION returns ecore::EInt:
	//	("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+;
	public VERSIONElements getVERSIONAccess() {
		return pVERSION;
	}
	
	public ParserRule getVERSIONRule() {
		return getVERSIONAccess().getRule();
	}

	//DotProjectFileContentProvider:
	//	"dot.project" ("#" keys+=(STRING | FileName))+ ("@" linkedResources+=[EmfsResource|EmfsName] (","
	//	linkedResources+=[EmfsResource|EmfsName])*)* ";";
	public DotProjectFileContentProviderElements getDotProjectFileContentProviderAccess() {
		return pDotProjectFileContentProvider;
	}
	
	public ParserRule getDotProjectFileContentProviderRule() {
		return getDotProjectFileContentProviderAccess().getRule();
	}

	//// Terminals except int and comments
	//// Slightly more permissive
	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_" | "-" | "0".."9")+;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 
}
