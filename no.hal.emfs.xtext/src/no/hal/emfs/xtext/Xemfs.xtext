// automatically generated by Xtext
grammar no.hal.emfs.xtext.Xemfs hidden(WS) // with org.eclipse.xtext.common.Terminals

import "platform:/plugin/no.hal.emfs/model/emfs.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

EmfsRoot returns EmfsContainer:
	{EmfsContainer}
	('emfs' (name = EmfsName)?)?
	('#' tags += ID)*
	('extends' (contentProvider = (GitContentProvider | EmfsResourcesRef)) ';')?
	'/'
	(resources += EmfsResource)*
;

EmfsName: ID ('.' ID)*;

EmfsResourcesRef:
	resources += [EmfsResource | EmfsName] (',' resources += [EmfsResource | EmfsName])*
	;

Name: '.'? ID ('.' ID)*;

EmfsResource: EmfsContainer | EmfsFile;

Property:
	'$' (name = EmfsName) '=' (value = (STRING | EmfsName))
;

FolderName: Name '/';

EmfsContainer:
	name = FolderName
	('#' tags += EmfsName)* (properties += Property)*
	('extends' contentProvider = (GitContentProvider | EmfsResourcesRef) ';')?
	( resources += EmfsResource )*
	=>';'?
;

GitContentProvider:
	gitRef = GitContentRef
	;

FileName: Name;

EmfsFile:
	name = FileName
	(writeable ?= '*')?
	('#' tags += ID)* (properties += Property)*
	(
		('@' contentProvider = (URLContentProvider | GitURLContentProvider) ';') |
		(contentProvider = (StringContentProvider | WrappingStringContentProvider)) |
		(':' contentProvider = (DotClasspathFileContentProvider | DotProjectFileContentProvider)) |
		(';')
	)
	;

StringContentProvider:
	(stringContents += AbstractStringContents)+	
;

AbstractStringContents: PropertyValueString | VerbatimStringContents;

terminal STRING_CONTENT: '---8<---\n' -> '\n--->8---';

VerbatimStringContents:
	stringContent = (STRING | STRING_CONTENT)
;

PropertyValueString:
	'$' ((propertyName = ID) | ('{' (propertyName = EmfsName) '}'))
	(':' defaultValue = (STRING | EmfsName))?
;

WrappingStringContentProvider:
	prefix = AbstractStringContents
	('@' contentProvider = (URLContentProvider | GitURLContentProvider))
	suffix = AbstractStringContents
;

URL_SCHEME: ('http' | 'https' | 'ftp' | 'file');
URL_HOST: '//' ID ('.' ID)* (':' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')+)?;
URL_PATH: '/' FolderName* FileName;

URL: URL_SCHEME ':' URL_HOST? URL_PATH;

URLContentProvider: urlString = (STRING | URL);

GitURLContentProvider:
	gitRef = GitContentRef
	;

// git@github.com:me/mytestrepo.git

GIT_HOST: ID ('.' ID)+;

GitContentRef:
	'git' '@' ((host = GIT_HOST (':' owner = ID)?) | owner = ID) '/' repo = ID (path = URL_PATH)?	
;

DotClasspathFileContentProvider: 
	'dot.classpath'
		(entries += AbstractClasspathEntry)+
	';'
;

AbstractClasspathEntry: ClasspathEntry;

CLASSPATH_ENTRY_PATH: (FolderName* FileName);

ClasspathEntry:
	explicitKind = ClasspathEntryKind explicitPath = CLASSPATH_ENTRY_PATH
	('(' major = VERSION ('.' minor = VERSION)? ')')?
;

enum ClasspathEntryKind: 
	src = 'source-folder'| output = 'output-folder' | lib = 'library-jar' | con = 'class-container'
;

VERSION returns ecore::EInt: ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')+;

DotProjectFileContentProvider:
	'dot.project'
		('#' keys += (STRING | FileName))+
		('@' linkedResources += [EmfsResource | EmfsName] (',' linkedResources += [EmfsResource | EmfsName])*)*
	';'
;

// Terminals except int and comments

// Slightly more permissive
terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')+;
terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 

terminal WS			: (' '|'\t'|'\r'|'\n')+;
