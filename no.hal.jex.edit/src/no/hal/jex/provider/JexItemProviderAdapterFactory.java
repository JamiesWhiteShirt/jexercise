/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package no.hal.jex.provider;

import java.util.ArrayList;
import java.util.Collection;

import no.hal.jex.util.JexAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class JexItemProviderAdapterFactory extends JexAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public JexItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.jex.JavaPack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaPackItemProvider javaPackItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.jex.JavaPack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaPackAdapter() {
		if (javaPackItemProvider == null) {
			javaPackItemProvider = new JavaPackItemProvider(this);
		}

		return javaPackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.jex.JavaClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaClassItemProvider javaClassItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.jex.JavaClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaClassAdapter() {
		if (javaClassItemProvider == null) {
			javaClassItemProvider = new JavaClassItemProvider(this);
		}

		return javaClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.jex.JavaField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaFieldItemProvider javaFieldItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.jex.JavaField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaFieldAdapter() {
		if (javaFieldItemProvider == null) {
			javaFieldItemProvider = new JavaFieldItemProvider(this);
		}

		return javaFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.jex.JavaMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaMethodItemProvider javaMethodItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.jex.JavaMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaMethodAdapter() {
		if (javaMethodItemProvider == null) {
			javaMethodItemProvider = new JavaMethodItemProvider(this);
		}

		return javaMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.jex.JavaRequirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaRequirementItemProvider javaRequirementItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.jex.JavaRequirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaRequirementAdapter() {
		if (javaRequirementItemProvider == null) {
			javaRequirementItemProvider = new JavaRequirementItemProvider(this);
		}

		return javaRequirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.jex.JUnitTest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JUnitTestItemProvider jUnitTestItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.jex.JUnitTest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJUnitTestAdapter() {
		if (jUnitTestItemProvider == null) {
			jUnitTestItemProvider = new JUnitTestItemProvider(this);
		}

		return jUnitTestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.jex.Exercise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExerciseItemProvider exerciseItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.jex.Exercise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExerciseAdapter() {
		if (exerciseItemProvider == null) {
			exerciseItemProvider = new ExerciseItemProvider(this);
		}

		return exerciseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.jex.ExercisePart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExercisePartItemProvider exercisePartItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.jex.ExercisePart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExercisePartAdapter() {
		if (exercisePartItemProvider == null) {
			exercisePartItemProvider = new ExercisePartItemProvider(this);
		}

		return exercisePartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.jex.JavaClassTester} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaClassTesterItemProvider javaClassTesterItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.jex.JavaClassTester}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaClassTesterAdapter() {
		if (javaClassTesterItemProvider == null) {
			javaClassTesterItemProvider = new JavaClassTesterItemProvider(this);
		}

		return javaClassTesterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.jex.JavaMethodTester} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaMethodTesterItemProvider javaMethodTesterItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.jex.JavaMethodTester}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaMethodTesterAdapter() {
		if (javaMethodTesterItemProvider == null) {
			javaMethodTesterItemProvider = new JavaMethodTesterItemProvider(this);
		}

		return javaMethodTesterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.jex.TestSuite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestSuiteItemProvider testSuiteItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.jex.TestSuite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestSuiteAdapter() {
		if (testSuiteItemProvider == null) {
			testSuiteItemProvider = new TestSuiteItemProvider(this);
		}

		return testSuiteItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (javaPackItemProvider != null) javaPackItemProvider.dispose();
		if (javaClassItemProvider != null) javaClassItemProvider.dispose();
		if (javaFieldItemProvider != null) javaFieldItemProvider.dispose();
		if (javaMethodItemProvider != null) javaMethodItemProvider.dispose();
		if (javaRequirementItemProvider != null) javaRequirementItemProvider.dispose();
		if (jUnitTestItemProvider != null) jUnitTestItemProvider.dispose();
		if (exerciseItemProvider != null) exerciseItemProvider.dispose();
		if (exercisePartItemProvider != null) exercisePartItemProvider.dispose();
		if (javaClassTesterItemProvider != null) javaClassTesterItemProvider.dispose();
		if (javaMethodTesterItemProvider != null) javaMethodTesterItemProvider.dispose();
		if (testSuiteItemProvider != null) testSuiteItemProvider.dispose();
	}

}
