test objectstructures.CardDeck

import java.util.Collection

instance deck = new CardDeck(2)

sequence constructor {
	-->
	state {
		deck ?= #["S1", "S2", "H1", "H2", "D1", "D2", "C1", "C2"];
	}
}

sequence shufflePerfectly {
	-- shufflePerfectly -->
	state {
		deck ?= #["S1", "D1", "S2", "D2", "H1", "C1", "H2", "C2"]
	}
}

sequence deal {
	
	instance CardHand hand
	
	-- deal(hand, 3) -->
	state {
		deck ?= #["S1", "S2", "H1", "H2", "D1"]
	}
}

method boolean ?= (CardDeck it, Collection<String> toStrings) {
	cardCount ?= toStrings.size
	var i = 0
	for (toString : toStrings) {
		val card = getCard(i)
		String.valueOf(card.suit) + card.face ?= toString 
		i = i + 1
	}
	true
}
