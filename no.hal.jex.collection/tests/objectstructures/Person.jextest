test objectstructures.Person

import java.util.Collection

instances
	hallvard = new Person("Hallvard", 'M'),
	marit = new Person("Marit", 'F'),
	jens = new Person("Jens", 'M'),
	anne = new Person("Anne", 'F')

sequence constructor "Personer uten foreldre og barn" {
	-->
	state {
		hallvard {
			father == null;
			mother == null;
			testChildren(#[]);
		}
		marit {
			father == null;
			mother == null;
			testChildren(#[]);
		}
		jens {
			father == null;
			mother == null;
			testChildren(#[]);
		}
		anne {
			father == null;
			mother == null;
			testChildren(#[]);
		}
	}
}

sequence farskapIllegalArgumentException "Marit kan ikke være far" {
	-- jens.father = marit throws IllegalArgumentException
	-- anne.father = marit throws IllegalArgumentException
}

sequence morskapIllegalArgumentException "Hallvard kan ikke være mor" {
	-- jens.mother = hallvard throws IllegalArgumentException
	-- anne.mother = hallvard throws IllegalArgumentException
}

sequence selvfarskapIllegalArgumentException "Jens kan ikke være sin egen far" {
	-- jens.father = jens throws IllegalArgumentException
}

sequence selvmorskapIllegalArgumentException "Anne kan ikke være sin egen mor" {
	-- anne.mother = anne throws IllegalArgumentException
}

sequence farskapSetFather "Hallvard er far til Jens og Anne" {
	-- jens.father = hallvard -->
	state {
		hallvard {
			father == null;
			mother == null;
			testChildren(#[jens]);
		}
		jens {
			father == hallvard;
			mother == null; testChildren(#[]);
		}
	}
	-- anne.father = hallvard -->
	state {
		hallvard {
			father == null;
			mother == null;
			testChildren(#[jens, anne]);
		}
		jens {
			father == hallvard;
			mother == null;
			testChildren(#[]);
		}
		anne {
			father == hallvard;
			mother == null;
			testChildren(#[]);
		}
	}
}

sequence farskapAddChild "Hallvard er far til Jens og Anne" {
	-- hallvard.addChild(jens) -->
	state {
		hallvard {
			father == null;
			mother == null;
			testChildren(#[jens]);
		}
		jens {
			father == hallvard;
			mother == null;
			testChildren(#[]);
		}
	}
	-- hallvard.addChild(anne) -->
	state {
		hallvard {
			father == null;
			mother == null;
			testChildren(#[jens, anne]);
		}
		jens {
			father == hallvard;
			mother == null;
			testChildren(#[]);
		}
		anne {
			father == hallvard;
			mother == null;
			testChildren(#[]);
		}
	}
}

sequence morskapSetMother "Marit er mor til Jens og Anne" {
	-- jens.mother = marit -->
	state {
		marit {
			father == null;
			mother == null;
			testChildren(#[jens]); }
		jens {
			father == null;
			mother == marit;
			testChildren(#[]);
		}
	}
	-- anne.mother = marit -->
	state {
		marit {
			father == null;
			mother == null;
			testChildren(#[jens, anne]);
		}
		jens {
			father == null;
			mother == marit;
			testChildren(#[]);
		}
		anne  {
			father == null;
			mother == marit;
			testChildren(#[]);
		}
	}
}

sequence morskapAddChild "Marit er mor til Jens og Anne" {
	-- marit.addChild(jens) -->
	state {
		marit {
			father == null;
			mother == null;
			testChildren(#[jens]);
		}
		jens {
			father == null;
			mother == marit;
			testChildren(#[]);
		}
	}
	-- marit.addChild(anne) -->
	state {
		marit {
			father == null;
			mother == null;
			testChildren(#[jens, anne]);
		}
		jens {
			father == null;
			mother == marit;
			testChildren(#[]);
		}
		anne {
			father == null;
			mother == marit;
			testChildren(#[]);
		}
	}
}

method void testChildren(Person person, Collection<?> children) {
	assertEquals(children.size, person.childCount);
	var i = 0;
	for (child : children) {
		assertEquals(child, person.getChild(i));
		i = i + 1;
	}
}
